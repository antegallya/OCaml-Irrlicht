### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet, traverse }
/usr/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:ml, file:lexer.ml, implem, ocaml, quiet, traverse }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { byte, compile, extension:ml, file:main.ml, implem, ocaml, quiet, traverse }
/usr/bin/ocamlc.opt -c -o main.cmo main.ml # cached
# Target: hash.c, tags: { c, compile, extension:c, file:hash.c, quiet, traverse }
/usr/bin/ocamlc.opt -c hash.c # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:ml, file:parser.ml, implem, ocaml, quiet, traverse }
/usr/bin/ocamlc.opt -c -o parser.cmo parser.ml # cached
# Target: main.byte, tags: { byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse }
/usr/bin/ocamlc.opt -custom parser.cmo lexer.cmo main.cmo hash.o -o main.byte # cached
# Compilation successful.
